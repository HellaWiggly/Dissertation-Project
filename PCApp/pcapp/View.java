/*
 * View.java
 * Author: Matt Adshead
 * Date: 6 Dec 2013
 * 
 * View object for PC Application.
 *  
 * This object creates and displays the system GUI.
 * It is the View portion of the Model View Controller design pattern.
 */

package mattadshead.swansea3.dissertation.pcapp;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Point;
import java.awt.geom.Point2D;
import java.io.FileNotFoundException;
import java.io.IOException;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.UIManager;

import lejos.pc.comm.NXTCommException;
import mattadshead.swansea3.dissertation.structures.DataScan;
import mattadshead.swansea3.dissertation.structures.MoveCommand;
import mattadshead.swansea3.dissertation.structures.OGM;
import mattadshead.swansea3.dissertation.structures.RawDataDisplay;
import mattadshead.swansea3.dissertation.structures.Visualisation;

public class View extends JFrame {
	
	//Constant declaration.
	private final String WINDOW_TITLE = "EnVisage Mapping Interface";
	
	//Action listener object to handle user interaction.
	private final EListener listener = new EListener();
	
	//Pointer to controller object.
	private Controller controller;
	
	/*
	 * Class constructor.
	 * Parameters:
	 * controller_p - Pointer to controller object for instantiation.
	 * Returns:
	 * None
	 */
	public View(Controller controller_p) {
		//Instantiate controller pointer.
		controller = controller_p;
		
		//Set look and feel to fit operating system.
		try {
	        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
	    } 
	    catch (Exception e) {
	       System.out.println("View > Constructor - Error setting system look and feel.");
	    }
		
		//Set window properties.
		setTitle(WINDOW_TITLE);
		
		//Initialise and draw interface.
		initComponents();
		
		//Add action listeners.
		functionSelect.addActionListener(listener);
        confirmButton.addActionListener(listener);
		
		//Set window to visible.
		this.setVisible(true);
	}
	
	/*
	 * Mutator method for controller pointer.
	 * Parameters:
	 * controller_p - Pointer to controller object.
	 * Returns:
	 * Boolean representing operation success.
	 */
	public boolean setController(Controller controller_p) {
		controller = controller_p;
		return true;
	}
	
	/*
	 * Access method for controller pointer.
	 * Parameters:
	 * None
	 * Returns:
	 * Pointer to controller object.
	 */
	public Controller getController() {
		return(controller);
	}
	
	/*
	 * Method which initialises GUI component objects.
	 * Code is generated by NetBeans GUI editor.
	 * Parameters:
	 * None
	 * Returns:
	 * None
	 */
	private void initComponents() {
		//Begin automatically generated GUI code.
		titlePanel = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        configPanel = new javax.swing.JPanel();
        configTitle = new javax.swing.JLabel();
        functionLabel = new javax.swing.JLabel();
        functionSelect = new javax.swing.JComboBox<String>();
        variableContainer = new javax.swing.JPanel();
        confirmButton = new javax.swing.JButton();
        mappingPanel = new Visualisation();
        variablePanel = new RDCPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));

        titlePanel.setBackground(new java.awt.Color(102, 102, 102));

        title.setFont(new java.awt.Font("Tahoma", 1, 18));
        title.setForeground(new java.awt.Color(204, 204, 204));
        title.setText("EnVisage Mapping Interface");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        configTitle.setFont(new java.awt.Font("Tahoma", 1, 14));
        configTitle.setText("Configuration");

        functionLabel.setText("Function:");

        functionSelect.addItem("Raw Data Collect");
        functionSelect.addItem("Move Command");
        functionSelect.addItem("Draw Map Grid");
        functionSelect.addItem("Set Map Value");
        functionSelect.addItem("Simple Map");
        functionSelect.addItem("Bayesian Map");
        functionSelect.addItem("Save Session");
        functionSelect.addItem("Load Session");
        functionSelect.addItem("Close Connection");

        variableContainer.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));
        
        confirmButton.setText("Confirm");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(configPanel);
        configPanel.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(variableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(configTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(functionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(functionSelect, 0, 157, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(confirmButton)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(functionLabel)
                    .addComponent(functionSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(variableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmButton)
                .addContainerGap())
        );

        mappingPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(mappingPanel);
        mappingPanel.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 568, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(configPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mappingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(configPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mappingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
      
		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(variableContainer);
		variableContainer.setLayout(jPanel4Layout);
		jPanel4Layout.setHorizontalGroup(
		jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		.addComponent(variablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(variablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        
        pack();
        //End automatically generated GUI code.
    }
	
	/*
	 * Method which creates option pane object depending on selected function.
	 * Parameters:
	 * panelType_p - Selected function index.
	 * Returns:
	 * VariablePane sub-class object for selected function.
	 */
	public VariablePane createVariablePanel(int panelType_p) {
		switch (panelType_p) {
			case 0:	variablePanel = new RDCPane();
					break;
			case 1:	variablePanel = new MCPane();
					break;
			case 2: variablePanel = new OGMPane();
					break;
			case 3: variablePanel = new SetValPane();
					break;
			case 4: variablePanel = new OGMPane();
					break;
			case 5: variablePanel = new OGMPane();
					break;
			case 6: variablePanel = new BlankPane();
					break;
			case 7: variablePanel = new LoadPane();
					break;
			case 8:	variablePanel = new BlankPane();
					break;
		}
		return(variablePanel);
	}
	
	
	/*
	 * Method to insert visualisation into GUI.
	 * Parameters:
	 * vis_p - Visualisation object to add.
	 * Returns:
	 * None
	 */
	public void insertVisualisation(Visualisation vis_p) {
		getContentPane().removeAll();
		mappingPanel = vis_p;
        //Begin automatically generated GUI code.
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(configPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mappingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(configPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mappingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        //End automatically generated GUI code.
        getContentPane().repaint();
	}
	
	/*
	 * Method to insert option pane into GUI.
	 * Parameters:
	 * panel_p - Option pane to add.
	 * Returns:
	 * None
	 */
	public void insertVariablePanel(VariablePane panel_p) {
		variableContainer.removeAll();
		//Begin automatically generated GUI code.	
		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(variableContainer);
		variableContainer.setLayout(jPanel4Layout);
		jPanel4Layout.setHorizontalGroup(
		jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		.addComponent(panel_p, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_p, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        //End automatically generated GUI code.
        variableContainer.repaint();
	}
	
	//GUI component declarations.
	private JButton confirmButton;
    private JComboBox<String> functionSelect;
    private JLabel configTitle;
    private JLabel title;
    private JLabel functionLabel;
    private JPanel titlePanel;
    private JPanel configPanel;
    private Visualisation mappingPanel;
    private JPanel variableContainer;
    private VariablePane variablePanel;
	
	//ActionListener inner override class to handle user interactions.
	public class EListener implements ActionListener {

		public void actionPerformed(ActionEvent ae) {
			//If action was clicking the confirm button.
			if (ae.getSource() == confirmButton) {
				//Perform function which is selected in dropdown box.
				try {
					int[] varsint;
					int tests, rate, rotate, travel, size, ratio, height, width;
					switch (functionSelect.getSelectedIndex()) {
						//Raw Data Collect
						case 0:	varsint = variablePanel.getVariableIntegers();
								tests = varsint[0];
								rate = varsint[1];
								if (!controller.checkIfNXTConnected()) {
									controller.bluetoothSetup();
								}
								controller.rawDataCollect(rate, tests);
								break;
						//Move Command
						case 1: varsint = variablePanel.getVariableIntegers();
								rotate = varsint[0];
								travel = varsint[1];
								MoveCommand mc = new MoveCommand(rotate, travel);
								if (!controller.checkIfNXTConnected()) {
									controller.bluetoothSetup();
								}
								controller.moveCommand(mc);
								break;
						//Draw Map Grid
						case 2: varsint = variablePanel.getVariableIntegers();
								size = varsint[0];
								ratio = varsint[1];
								height = varsint[2];
								width = varsint[3];
								controller.drawMapGrid(size, ratio, height, width);
								break;
						//Set Map Value
						case 3: varsint = variablePanel.getVariableIntegers();
								Point cell = new Point(varsint[0], varsint[1]);
								controller.testSetMapValue(cell);
								break;
						//Simple Map
						case 4: varsint = variablePanel.getVariableIntegers();
								size = varsint[0];
								ratio = varsint[1];
								height = varsint[2];
								width = varsint[3];
								rate = varsint[4];
								if (!controller.checkIfNXTConnected()) {
									controller.bluetoothSetup();
								}
								controller.drawMapGrid(size, ratio, height, width);
								controller.simpleMap(rate);
								break;
						//Bayesian Map
						case 5:	varsint = variablePanel.getVariableIntegers();
								size = varsint[0];
								ratio = varsint[1];
								height = varsint[2];
								width = varsint[3];
								rate = varsint[4];
								if (!controller.checkIfNXTConnected()) {
									controller.bluetoothSetup();
								}
								controller.drawMapGrid(size, ratio, height, width);
								controller.bayesianMap(rate);
								break;
						//Save Session
						case 6:	controller.saveSession();
								break;
						//Load Session		
						case 7: String filepath = variablePanel.getVariableStrings()[0];
								if (controller.checkIfMapPresent()) {
									OGM map = (OGM)controller.getModel().getVisualisation();
									controller.loadSession(map, filepath);
								}
								break;
						//Close Connection
						case 8: controller.closeConnection();
								break;
					}
				} catch (NumberFormatException e) {
					JOptionPane.showMessageDialog(
							mappingPanel,
						    "Invalid variable input.",
						    "Error",
						    JOptionPane.ERROR_MESSAGE);
					System.out.println(e);
				} catch (NXTCommException e) {
					JOptionPane.showMessageDialog(
							mappingPanel,
						    "Unable to connect to NXT robot.\n"
						    + "Are you sure the robot is in range and switched on?",
						    "Error",
						    JOptionPane.ERROR_MESSAGE);
				} catch (FileNotFoundException e){
					JOptionPane.showMessageDialog(
							mappingPanel,
						    "File not found.",
						    "Error",
						    JOptionPane.ERROR_MESSAGE);
				} catch (IOException e) {
					JOptionPane.showMessageDialog(
							mappingPanel,
						    "Error reading file.",
						    "Error",
						    JOptionPane.ERROR_MESSAGE);
				}
			}
			//If action was changing the function drop-down.
			if (ae.getSource() == functionSelect) {
				insertVariablePanel(createVariablePanel(functionSelect.getSelectedIndex()));
			}
		}	
	}
}